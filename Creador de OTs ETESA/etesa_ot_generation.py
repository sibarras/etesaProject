# -*- coding: utf-8 -*-
"""ETESA_OT_GENERATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nCwseU4UMkD-3-dxYA79JR69MFj1dmXu

# Programa para generar OTS con el PMA de la Coordinación

Para generar las OTS, importamos los módulos para leer el archivo de Excel y el programa que manipula la web de máximo.
"""

import pandas as pd
from google.colab import files
from pathlib import Path
# Aqui falta un programa, que aun no lo he subido al colab.

"""Se debe subir el archivo de PMA para que el programa lea de el cada uno de los elementos que van en las OTS."""

ans = input('Subir PMA? y/n: ')
if ans == 'y':
    files.upload()

"""Ahora, tomamos el archivo y obtenemos su dirección, para poder ser leído por la libería de gestión de datos."""

filepath = Path(__doc__).parent
for f in filepath.glob('*xlsx'):
    file = f.__str__()
try:
    print(file)
except Exception as e:
    print('ERROR:', e)

"""Ahora, se cargan los datos de la hoja de Excel al software. La hoja debe ser la primera en el libro de excel y se debe especificar donde esta el encabezado de la tabla y el final de las columnas."""

heading = 15
final_col = 16
try:
    excel = pd.ExcelFile(file)
    worksheets = excel.sheet_names
    pma_df = excel.parse(excel.sheet_names[0], heading-1, usecols=range(final_col))
except Exception as e:
    print('Te has equivocado, hay un error en lo especificado.', e)

pma_df

"""Luego de cargar el archivo, debemos filtrar los datos importantes para generar los trabajos que se subiran al máximo.
Para esto necesitamos saber, cuales son estos valores:
1. Titulo *
2. Localización *
3. Tipo (Todas son MPD en este caso) *
4. Descripción (PMA en este caso) *
5. Prioridad de OT (Se toma del equipo a medir) *
6. Fecha de Inicio *
7. Duración (Se toma del equipo a medir) *
8. Supervisor (Depende de la coordinación)
9. Mano de Obra (Datos de la coordinación)
10. Herramientas (Se toma del equipo a medir)

El programa debe regresar el número de OT generado por el sistema.

De este libro, podemos obtener los datos que se encuentran con asterisco. Trabajaremos ahora la hoja de datos para obtener estos valores.

"""

zona1_df = pma_df.loc[pma_df['ZONA']==1]
zona2_df = pma_df.loc[pma_df['ZONA']==2]
zona3_df = pma_df.loc[pma_df['ZONA']==3]

print('Datos de Zona 1:', f'Cantidad de OTS: {len(zona1_df)}', zona1_df, sep='\n')
print('Datos de Zona 2:', f'Cantidad de OTS: {len(zona2_df)}', zona2_df, sep='\n')
print('Datos de Zona 3:', f'Cantidad de OTS: {len(zona3_df)}', zona3_df, sep='\n')

"""Tomamos de los datos, los valores necesarios para las ots."""

def generate_works(df:pd.DataFrame) -> dict:
    pass

needed_heads = [
    'DESCRIPCION DEL TRABAJO',
    'DESCRIPCION DE EQUIPO',
    'TIPO DE EQUIPO',
    'SUBESTACION',
    'FECHA DE INICIO',
    'FECHA FINAL',
]
works_df = zona1_df[needed_heads]

"""Vamos a añadir a este conjunto de datos, los valores que faltan para completar los trabajos a realizar."""

def gen_worktype(works_df:pd.DataFrame) -> pd.DataFrame:
    pass

worktypes = works_df['TIPO DE EQUIPO']

data = {
    'priority': {},
    'duration': {}
}
for work in worktypes.drop_duplicates():
    val = input(f'Inserta un valor entero entre 1 5 y 9 para el trabajo realizado a {work}: ')
    assert int(val) in [1, 5, 9]
    data['priority'][work] = int(val)
    length = input(f'Inserta un tiempo en horas como num. entero para el trabajo realizado a {work}: ')
    assert int(length) in range(1, 11)
    data['duration'][work] = int(length)
    print()

print(data)

priority = worktypes.copy()
for work in priority:
    priority.loc[work] = data['priority'][work]

print(priority)